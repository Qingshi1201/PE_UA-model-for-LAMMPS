# ------------------------------------------------- Define chains bead by bead -------------------------------------------
# import functions and modueles
import numpy as np
import random  


# define parameters of polymer chains
n       = 100    # bead per chain
l       = 40    # chain number
d       = 1.42   # bond length
mass    = 14     # bead mass  PE UA, (CH2)
density = 0.1    # initial density


# calculate the size of the box
lx = ly = lz = ((n*l*mass)/density)**(1/3) 


# go through chains and beads for mol-ID
mol = []
for i in range (l):
    for j in range (n):
        mol.append(i+1)

x = np.zeros(n*l)
y = np.zeros(n*l)
z = np.zeros(n*l)


# go through chains and beads for 3D random walk
for k in range (l):
    x[k*n] = random.randint(-int(lx/2), int(lx/2))
    y[k*n] = random.randint(-int(ly/2), int(ly/2))
    z[k*n] = random.randint(-int(lz/2), int(lz/2))
    for i in range(1, n):
        val = random.randint(1, 6)
        if val == 1:
            x[i+k*n] = x[i+k*n - 1] + d 
            y[i+k*n] = y[i+k*n - 1]
            z[i+k*n] = z[i+k*n - 1]
        elif val == 2:
            x[i+k*n] = x[i+k*n - 1] 
            y[i+k*n] = y[i+k*n - 1] + d
            z[i+k*n] = z[i+k*n - 1]
        elif val == 3:
            x[i+k*n] = x[i+k*n - 1]
            y[i+k*n] = y[i+k*n - 1] 
            z[i+k*n] = z[i+k*n - 1] + d
        elif val == 4:
            x[i+k*n] = x[i+k*n - 1] - d
            y[i+k*n] = y[i+k*n - 1]
            z[i+k*n] = z[i+k*n - 1]
        elif val == 5:
            x[i+k*n] = x[i+k*n - 1]
            y[i+k*n] = y[i+k*n - 1] - d
            z[i+k*n] = z[i+k*n - 1]
        else:
            x[i+k*n] = x[i+k*n - 1]
            y[i+k*n] = y[i+k*n - 1] 
            z[i+k*n] = z[i+k*n - 1] - d


# consider the boundary condition in the x direction
for i in range (len(x)):
    if x[i] > lx/2:
        x[i] = lx-x[i]
    elif x[i] < -lx/2:
        x[i] = -lx-x[i]
    else:
        x[i] = x[i]


# consider the boundary condition in the y direction
for i in range (len(y)):
    if y[i] > ly/2:
        y[i] = ly-y[i]
    elif y[i] < -ly/2:
        y[i] = -ly-y[i]


# consider the boundary condition in the z direction
for i in range (len(z)):
    if z[i] > lz/2:
        z[i] = lz-z[i]
    elif z[i] < -lz/2:
        z[i] = -lz-z[i]



#------------------------------------------------------------- Write LAMMPS data files --------------------------------
# touch a new data file
with open(r'./40_100.data'.format(n,l),'w')as LAMMPS:
    # First line is a comment line 
    LAMMPS.write('The Random PE system generated by Python\n\n')
    #----------------Header Line----------------
    LAMMPS.write('{} atoms\n'.format(n*l))
    LAMMPS.write('{} bonds\n'.format((n-1)*l))
    LAMMPS.write('{} angles\n'.format((n-2)*l))
    LAMMPS.write('{} dihedrals\n\n'.format((n-3)*l))
    #-----------------Types defination--------------
    LAMMPS.write('{} atom types\n'.format(1))
    LAMMPS.write('{} bond types\n'.format(1))
    LAMMPS.write('{} angle types\n'.format(1))
    LAMMPS.write('{} dihedral types\n\n'.format(1))
    #--------------Specify Masses and dimensions------------------
    LAMMPS.write('{} {} xlo xhi\n'.format(-lx/2, lx/2)) 
    LAMMPS.write('{} {} ylo yhi\n'.format(-ly/2, ly/2))
    LAMMPS.write('{} {} zlo zhi\n'.format(-lz/2, lz/2))
    LAMMPS.write('\nMasses\n\n')
    LAMMPS.write('{} {} # CH2\n'.format(1, mass))
    #-------------- Specify Atoms information ------------------

    
    # Atoms section
    LAMMPS.write('\nAtoms  # full \n\n')
    # Atom_style: full----atom-Id; molecule-ID; atom-type; q; x; y; z;
	# Write Atoms Section
    id = 1
    for i in range (len(x)):  
        LAMMPS.write('{} {} {} {} {} {} {}\n'.format(i+1, mol[i], 1, 0, x[i], y[i], z[i]))   
        id = id + 1
    # Write Bonds Section
    LAMMPS.write('\nBonds   \n\n')
    id = 1
    for i in range(l):
        for j in range(n-1):
            LAMMPS.write('{} {} {} {} \n'.format(id, 1, j+i*n+1, j+i*n+2))
            id = id + 1
    # Write Angles Section
    LAMMPS.write('\nAngles   \n\n')
    id = 1
    for i in range(l):
        for j in range(n-2):
            LAMMPS.write('{} {} {} {} {}\n'.format(id, 1, j+i*n+1, j+i*n+2, j+i*n+3))
            id = id + 1
    # Write Dihedrals Section
    LAMMPS.write('\nDihedrals   \n\n')
    id = 1
    for i in range(l):
        for j in range(n-3):
            LAMMPS.write('{} {} {} {} {} {}\n'.format(id, 1, j+i*n+1, j+i*n+2, j+i*n+3, j+i*n+4))
            id = id + 1
    

